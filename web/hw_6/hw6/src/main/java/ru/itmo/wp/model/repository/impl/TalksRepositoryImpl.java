package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Message;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.TalksRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TalksRepositoryImpl implements TalksRepository {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    @Override
    public void save(Message message) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO `Talks` (`sourceUserId`, `targetUserId`, `text`) VALUES (?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS
            )) {
                statement.setLong(1, message.getSourceUserId());
                statement.setLong(2, message.getTargetUserId());
                statement.setString(3, message.getText());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Message.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        message.setId(generatedKeys.getInt(1));
                        message.setCreationTime(find(message.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save Message [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Message.", e);
        }
    }

    private Message find(long id) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talks WHERE id=?")) {
                statement.setLong(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toMessage(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find ", e);
        }
    }

    @Override
    public List<Message> findAll() {
        List<Message> messages = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talks ORDER BY id DESC")) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    Message message;
                    while ((message = toMessage(statement.getMetaData(), resultSet)) != null) {
                        messages.add(message);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Message.", e);
        }
        return messages;
    }

    private Message toMessage(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        Message message = new Message();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    message.setId(resultSet.getLong(i));
                    break;
                case "sourceUserId":
                    message.setSourceUserId(resultSet.getLong(i));
                    break;
                case "targetUserId":
                    message.setTargetUserId(resultSet.getLong(i));
                    break;
                case "text":
                    message.setText(resultSet.getString(i));
                    break;
                case "creationTime":
                    message.setCreationTime(resultSet.getTimestamp(i));
                    break;
                default:
                    // No operations.
            }
        }

        return message;
    }
}
